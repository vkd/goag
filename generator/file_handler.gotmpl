{{ define "FileHandler" }}

{{- range $_, $h := .Handlers }}
{{ $h.Render }}
{{ end -}}

var LogError = func(err error) {
	log.Println(fmt.Sprintf("Error: %v", err))
}

{{ if .IsWriteJSONFunc -}}
func writeJSON(w io.Writer, v interface{}, name string) {
	err := json.NewEncoder(w).Encode(v)
	if err != nil {
		LogError(fmt.Errorf("write json response %q: %w", name, err))
	}
}

{{ end -}}

{{ if not .IsCustomMaybe }}
type Maybe[T any] struct {
	IsSet   bool
	Value T
}

func Nothing[T any]() Maybe[T] {
	return Maybe[T]{}
}

func Just[T any](v T) Maybe[T] {
	return Maybe[T]{
		IsSet: true,
		Value: v,
	}
}

func (m Maybe[T]) Get() (zero T, _ bool) {
	if m.IsSet {
		return m.Value, true
	}
	return zero, false
}

func (m *Maybe[T]) Set(v T) {
	m.IsSet = true
	m.Value = v
}
{{ end }}

{{- if not .IsCustomNullable }}
type Nullable[T any] struct {
	IsSet   bool
	Value T
}

func Null[T any]() Nullable[T] {
	return Nullable[T]{}
}

func Pointer[T any](v T) Nullable[T] {
	return Nullable[T]{
		IsSet: true,
		Value: v,
	}
}

func (m Nullable[T]) Get() (zero T, _ bool) {
	if m.IsSet {
		return m.Value, true
	}
	return zero, false
}

func (m *Nullable[T]) Set(v T) {
	m.IsSet = true
	m.Value = v
}

var _ json.Marshaler = (*Nullable[any])(nil)

func (m Nullable[T]) MarshalJSON() ([]byte, error) {
	if m.IsSet {
		return json.Marshal(&m.Value)
	}
	return []byte(nullValue), nil
}

var _ json.Unmarshaler = (*Nullable[any])(nil)

const nullValue = "null"

var nullValueBs = []byte(nullValue)

func (m *Nullable[T]) UnmarshalJSON(bs []byte) error {
	if bytes.Equal(bs, nullValueBs) {
		m.IsSet = false
		return nil
	}
	m.IsSet = true
	return json.Unmarshal(bs, &m.Value)
}
{{ end }}

{{ template "ErrParseParam" }}
{{ end }}

{{/* ----------------------------- Handler ------------------------------------- */}}
{{ define "Handler" }}
{{- $h := . }}
{{- $name := $h.Name}}
{{- $handlerFunc := $h.HandlerFuncName }}
{{- $requestParser := print $name "Request" }}
{{- $httpRequestParser := print "" $name "HTTPRequest" }}
{{- $request := print $name "Params" }}
{{- $newParams := print "new" $name "Params" }}
{{- $responseWriter := print $name "Response" }}
// ---------------------------------------------
// {{$name}} - {{ comment $h.Description }}
// {{ .HTTPMethod }} {{ .PathRaw }}
// ---------------------------------------------

{{if $h.Summary}}// {{$handlerFunc}} - {{$h.Summary}}{{end}}
type {{ $handlerFunc }} func(ctx context.Context, r {{$requestParser}}) {{$responseWriter}}

func (f {{$handlerFunc}}) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	f(r.Context(), {{$httpRequestParser}}(r)).write{{ .Name }}(w)
}

func ({{$handlerFunc}}) Path() string { return "{{ .PathRaw }}" }

func ({{$handlerFunc}}) Method() string { return {{ .HTTPMethodGoValue }} }


type {{$requestParser}} interface {
	HTTP() *http.Request
	Parse() {{if $h.CanParseError}}({{end}}{{$request}}{{if $h.CanParseError}}, error){{end}}
}

func {{ $httpRequestParser }}(r *http.Request) {{ $requestParser }} {
	return {{ private $httpRequestParser }}{r}
}

type {{ private $httpRequestParser }} struct {
	Request *http.Request
}

func (r {{ private $httpRequestParser }}) HTTP() *http.Request { return r.Request }

func (r {{ private $httpRequestParser }}) Parse() {{if $h.CanParseError}}({{end}}{{$request}}{{if $h.CanParseError}}, error){{end}} {
	return {{$newParams}}(r.Request)
}

type {{$request}} struct {
	{{ if $h.ParametersQuery }}
	Query {{$request}}Query
	{{ end }}

	{{ if $h.ParametersPath }}
	Path {{$request}}Path
	{{ end }}

	{{ if $h.ParametersHeader }}
	Headers {{$request}}Headers
	{{ end }}

	{{ if $h.GoTypeFn }}
	Body {{ call $h.GoTypeFn }}
	{{- else if $h.BodyType }}
	Body {{$request}}Body
	{{- else if $h.BodyReader }}
	Body io.Reader
	{{- end }}
}

{{- if $h.ParametersQuery }}

type {{$request}}Query struct{
	{{ range $_, $p := .ParametersQuery }}
	{{ $p.HandlerParameter.Render }}
	{{ end }}
}
{{- end }}

{{- if $h.ParametersPath }}

type {{$request}}Path struct{
	{{ range $_, $p := .ParametersPath }}
	{{ $p.HandlerParameter.Render }}
	{{ end }}
}
{{- end }}

{{- if $h.ParametersHeader }}

type {{$request}}Headers struct{
	{{ range $_, $p := .ParametersHeader }}
	{{ $p.HandlerParameter.Render }}
	{{ end }}
}
{{- end }}

{{- if $h.BodyType }}

{{ $h.BodyType.Render }}
{{- end }}

func {{ $newParams }}(r *http.Request) (zero {{ $request }}{{ if $h.CanParseError }}, _ error{{ end }}) {
	var params {{ $request }}

	{{ if $h.ParametersQuery }}
	// Query parameters
	{
		query := r.URL.Query()
		{{- range $_, $q := .ParametersQuery }}
		{
            q, ok := query["{{.ParameterName}}"]
            {{- if .Required }}
			if !ok {
                return zero, fmt.Errorf("query parameter '{{.ParameterName}}': is required")
            }
            {{- end }}
            if ok && len(q) > 0 {
				{{ (call .ParseStrings (print "params.Query." .HandlerParameter.FieldName) "q" false (returns "zero" (parseError "query" .ParameterName))) }}
            }
		}
		{{- end }}
	}
	{{ end }}

	{{ if $h.ParametersHeader }}
	// Headers
	{
		header := r.Header
		{{- range $_, $h := .ParametersHeader }}
		{
            hs := header.Values("{{ .ParameterName }}")
            {{- if .Required }}
            if len(hs) == 0 {
				return zero, fmt.Errorf("header parameter '{{ .ParameterName }}': is required")
			}
            {{- end }}
			if len(hs) > 0 {
			    {{ $h.Parser.ParseStrings (print "params.Headers." .HandlerParameter.FieldName) "hs" false (returns "zero" (parseError "header" .ParameterName)) }}
			}
		}
		{{- end}}
	}
	{{ end }}

	{{ if $h.ParametersPath }}
	// Path parameters
	{
		p := r.URL.Path

		{{- if $h.BasePathPrefix }}
		if !strings.HasPrefix(p, "{{ $h.BasePathPrefix }}") {
			return zero, fmt.Errorf("wrong path: expected '{{ $h.BasePathPrefix }}...'")
		}
		p = p[{{ len $h.BasePathPrefix }}:] // "{{ $h.BasePathPrefix }}"

		if !strings.HasPrefix(p, "/") {
			return zero, fmt.Errorf("wrong path: expected '{{ $h.BasePathPrefix }}/...'")
		}

		{{ end }}

		{{- range $_, $p := $h.PathParsers }}

		{{ $p.ParseString "params.Path." "p" false (returns "zero" nil) }}
		{{- end }}
	}
	{{ end }}

	{{- if or $h.GoTypeFn $h.BodyType }}

	defer r.Body.Close()
	err := json.NewDecoder(r.Body).Decode(&params.Body)
	if err != nil {
		return zero, fmt.Errorf("decode request body: %w", err)
	}
	{{- else if $h.BodyReader }}
	params.Body = r.Body
	{{- end }}

	return params{{ if $h.CanParseError }}, nil{{ end }}
}

func (r {{ $request }}) HTTP() *http.Request { return nil }

func (r {{ $request }}) Parse() {{if $h.CanParseError}}({{end}}{{$request}}{{if $h.CanParseError}}, error){{end}} {	return r{{if $h.CanParseError}}, nil{{end}} }

type {{ $responseWriter }} interface {
	write{{ .Name }}(http.ResponseWriter)
}

{{ range $_, $r := .Responses }}
{{ $r.Render }}
{{ end }}
{{ if .DefaultResponse.IsSet }}
{{ .DefaultResponse.Value.Render }}
{{ end }}
{{ end }}


{{/* ----------------------------- HandlerParameter ------------------------------------- */}}
{{ define "HandlerParameter" }}
{{- if .FieldComment }}// {{ .FieldName }} - {{ comment .FieldComment }}
{{end}}
{{- .FieldName }} {{ call .TypeFn }}
{{- end }}


{{/* ----------------------------- PathParserConstant ------------------------------------- */}}
{{ define "PathParserConstant" }}
if !strings.HasPrefix(p, "{{.Prefix}}") {
	return zero, fmt.Errorf("wrong path: expected '{{.FullPath}}'")
}
p = p[{{len .Prefix}}:] // "{{.Prefix}}"
{{- end }}


{{/* ----------------------------- PathParserVariable ------------------------------------- */}}
{{ define "PathParserVariable" }}
{
	idx := strings.Index({{ .From }}, "/")
	if idx == -1 {
		idx = len({{ .From }})
	}
	vPath := {{ .From }}[:idx]
	{{ .From }} = {{ .From }}[idx:]

	if len(vPath) == 0 {
		return {{.Error.New "required"}}
	}

	{{ .Convert.ParseString .To "vPath" .IsNew .Error }}
}
{{- end }}
