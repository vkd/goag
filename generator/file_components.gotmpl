{{/* ----------------------------- Components ------------------------------------- */}}
{{ define "Components" -}}

{{- if .Schemas }}
// ------------------------
//         Schemas
// ------------------------

{{range $_, $s := .Schemas}}
{{ $s.Render }}
{{end}}
{{- end}}

{{- if .Headers }}
// ------------------------
//         Headers
// ------------------------

{{range $_, $v := .Headers}}
{{ $v.Render }}
{{end}}
{{- end}}

{{- if .RequestBodies }}
// ------------------------------
//         RequestBodies
// ------------------------------

{{range $_, $v := .RequestBodies}}
{{ $v.Render }}
{{end}}
{{- end}}

{{- if .Responses }}
// ------------------------------
//         Responses
// ------------------------------

{{range $_, $v := .Responses}}
{{ $v.Render }}
{{end}}
{{- end}}
{{- end }}

{{/* ----------------------------- SchemaComponent ------------------------------------- */}}
{{ define "SchemaComponent" -}}
{{- if .Description }}// {{ .Name }} - {{ comment .Description }}
{{ end -}}
type {{ .Name }} {{ .Schema.RenderTypeDefinition }}

{{- if not .IgnoreParseFormat }}

func New{{ .Name }}(v {{ .Schema.RenderBaseGoType }}) {{ .Name }} {
    return {{ .Name }}(v)
}

func (c {{ .Name }}) {{ title .FuncTypeName }}() {{ .Schema.RenderBaseGoType }} {
    return {{ .Schema.RenderBaseGoType }}(c)
}
{{- end }}

{{- if .WriteJSONFunc }}

var _ json.Marshaler = (*{{ .Name }})(nil)

func (c {{ .Name }}) MarshalJSON() ([]byte, error) {
	var out bytes.Buffer
	var err error
	write := func(bs []byte) {
		if err != nil {
			return
		}
		n, werr := out.Write(bs)
		if werr != nil {
			err = werr
		} else if len(bs) != n {
			err = fmt.Errorf("wrong len of written body")
		}
	}

	write([]byte(`{`))
    mErr := c.marshalJSONInnerBody(&out)
    if mErr != nil {
        err = mErr
    }
	write([]byte(`}`))

    if err != nil {
        return nil, err
    }

	return out.Bytes(), nil
}

func (c {{ .Name }}) marshalJSONInnerBody(out io.Writer) error {
	encoder := json.NewEncoder(out)
	var err error
	var comma string
	write := func(s string) {
		if err != nil || len(s) == 0 {
			return
		}
		n, werr := out.Write([]byte(s))
		if werr != nil {
			err = werr
		} else if len(s) != n {
			err = fmt.Errorf("wrong len of written body")
		}
	}
	writeProperty := func(name string, v any) {
		if err != nil {
			return
		}
		if v == nil {
			write(comma + `"` + name + `":null`)
		} else {
			write(comma + `"` + name + `":`)
			werr := encoder.Encode(v)
			if werr != nil {
				err = werr
			}
		}
		comma = ","
	}
	_ = writeProperty

    {{- range $i, $f := .StructureType.Fields }}
        {{- if .Embedded }}
    mErr := c.{{ call .GoTypeFn }}.marshalJSONInnerBody(out)
    if mErr != nil {
        err = mErr
    }
        comma = ","
        {{- else }}
            {{- if .Required }}
    {
        var v any
        {{ call .RenderToBaseTypeFn "v" (print "c." .Name) }}
        writeProperty("{{ .JSONTag }}", v)
    }
            {{- else }}
    if vOpt, ok := {{ (print "c." .Name) }}.Get(); ok {
        var v any = nil
        {{ call .RenderToBaseTypeFn "v" "vOpt" }}
        writeProperty("{{ .JSONTag }}", v)
    }
            {{- end }}
        {{- end }}
    {{- end }}

    {{- if .StructureType.AdditionalProperties }}
	for k, v := range c.AdditionalProperties {
        writeProperty(k, v)
	}
    {{ end }}

	return err
}

var _ json.Unmarshaler = (*{{ .Name }})(nil)

func (c *{{ .Name }}) UnmarshalJSON(bs []byte) error {
	m := make(map[string]json.RawMessage)
    err := json.Unmarshal(bs, &m)
    if err != nil {
        return fmt.Errorf("raw key/value map: %w", err)
    }
	return c.unmarshalJSONInnerBody(m)
}

func (c *{{ .Name }}) unmarshalJSONInnerBody(m map[string]json.RawMessage) error {
    var err error
    _ = err
    {{- range $_, $f := .StructureType.Fields }}
        {{- if .Embedded }}
    err = c.{{ .Name }}.unmarshalJSONInnerBody(m)
    if err != nil {
        return fmt.Errorf("embedded '{{ .Name }}' field: %w", err)
    }
        {{- else }}
    if raw, ok := m["{{ .JSONTag }}"]; ok {
		    {{- if .Required }}
        {{ .Schema.RenderUnmarshalJSON (print "c." .Name) "raw" false (prefixError (print "'" .JSONTag "' field")) }}
			{{- else }}
        {{ .Schema.RenderUnmarshalJSON (print "c." .Name ".Value") "raw" false (prefixError (print "'" .JSONTag "' field")) }}
		c.{{ .Name }}.IsSet = true
			{{- end }}
        delete(m, "{{ .JSONTag }}")
    {{- if .Required }}
    } else {
        return fmt.Errorf("'{{ .JSONTag }}' key is missing")
    {{- end }}
    }
        {{- end }}
    {{- end }}
    {{- if .StructureType.AdditionalProperties }}
	if len(m) > 0 {
		c.AdditionalProperties = make(map[string]{{ .StructureType.AdditionalProperties.RenderGoType }})
	}
	for k, bs := range m {
        var v {{ .StructureType.AdditionalProperties.RenderGoType }}
        err = json.Unmarshal(bs, &v)
        if err != nil {
            return fmt.Errorf("additional property %q: %w", k, err)
        }
		c.AdditionalProperties[k] = v
	}
    {{- end }}
	return nil
}

{{- else if .WriteJSONFuncArray }}

var _ json.Marshaler = (*{{ .Name }})(nil)

func (c {{ .Name }}) MarshalJSON() ([]byte, error) {
	var out bytes.Buffer
	var err error
	write := func(bs []byte) {
		if err != nil {
			return
		}
		n, werr := out.Write(bs)
		if werr != nil {
			err = werr
		} else if len(bs) != n {
			err = fmt.Errorf("wrong len of written body")
		}
	}

	write([]byte(`[`))
    mErr := c.marshalJSONInnerBody(&out)
    if mErr != nil {
        err = mErr
    }
	write([]byte(`]`))

    if err != nil {
        return nil, err
    }

	return out.Bytes(), nil
}

func (c {{ .Name }}) marshalJSONInnerBody(out io.Writer) error {
	encoder := json.NewEncoder(out)
	var err error
	var comma string
	write := func(s string) {
		if err != nil || len(s) == 0 {
			return
		}
		n, werr := out.Write([]byte(s))
		if werr != nil {
			err = werr
		} else if len(s) != n {
			err = fmt.Errorf("wrong len of written body")
		}
	}
	writeItem := func(v any) {
		if err != nil {
			return
		}
		if v == nil {
			write(`null`)
		} else {
			werr := encoder.Encode(v)
			if werr != nil {
				err = werr
			}
		}
	}
	_ = writeItem

    for i, cv := range c {
		_ = i
		if err != nil {
			return err
		}

		write(comma)
		comma = ","

    {{ if .SliceType.Items.Ref }}
		{{- if .SliceType.Items.Ref.Schema.IsCustom }}
        var v {{ .SliceType.Items.Ref.Schema.RenderTypeDefinition }}
        {{ .SliceType.Items.Ref.Schema.RenderToBaseType "v" (print "cv.ToSchema" .SliceType.Items.Ref.Name "()") }}
        vItem, err := {{ .SliceType.Items.Ref.Name }}(v).MarshalJSON()
		if err != nil {
			return fmt.Errorf("marshal %d element: %v", i, err)
		}
		writeItem(json.RawMessage(vItem))
		{{- else }}
		writeItem(cv)
		{{- end }}
    {{- else }}
        {{ .SliceType.Items.RenderMarshalJSON "v" "cv" true newError }}
        writeItem(cv)
    {{- end }}
    }

	return err
}

var _ json.Unmarshaler = (*{{ .Name }})(nil)

func (c *{{ .Name }}) UnmarshalJSON(bs []byte) error {
	var m []json.RawMessage
    err := json.Unmarshal(bs, &m)
    if err != nil {
        return fmt.Errorf("raw key/value map: %w", err)
    }
	return c.unmarshalJSONInnerBody(m)
}

func (c *{{ .Name }}) unmarshalJSONInnerBody(m []json.RawMessage) error {
    out := make({{ .Name }}, 0, len(m))
    var err error
    _ = err
    for _, vm := range m {
        {{ .SliceType.Items.RenderUnmarshalJSON "vItem" "vm" true newError }}
        out = append(out, vItem)
    }
    *c = out
	return nil
}
{{- end }}
{{- end }}

{{/* ----------------------------- SchemaComponent_Alias ------------------------------------- */}}
{{ define "SchemaComponent_Alias" -}}
{{- if .Description }}// {{ .Name }} - {{ comment .Description }}
{{ end -}}
type {{ .Name }} = {{ .Schema.RenderTypeDefinition }}
{{- end }}

{{/* ----------------------------- HeaderComponent ------------------------------------- */}}
{{ define "HeaderComponent" -}}
{{- if .Description }}// {{ .Name }} - {{ comment .Description }}
{{ end -}}
type {{ .Name }} {{ call .GoTypeRenderFn }}

func (h {{ .Name }}) String() string {
    return {{ .Type.RenderFormat (print (call .GoTypeRenderFn) "(h)") }}
}

func (c *{{ .Name }}) Parse(s string) error {
    {{ .Type.ParseString "v" "s" true newError }}
    *c = {{ .Name }}(v)
    return nil
}
{{- end }}

{{/* ----------------------------- RequestBodyComponent ------------------------------------- */}}
{{ define "RequestBodyComponent" -}}
{{- if .Description }}// {{ .Name }} - {{ comment .Description }}
{{ end -}}
type {{ .Name }} {{ call .GoTypeFn }}
{{- end }}

{{/* ----------------------------- ResponseComponent ------------------------------------- */}}
{{ define "ResponseComponent" -}}
{{- $response := . -}}
func New{{.Name}}({{range $i,$a := .Args}}{{if $i}}, {{end}}{{$a.ArgName}} {{call $a.GoTypeFn}}{{end}}) {{.HandlerName}}Response {
	var out {{.Name}}
	{{- range $_, $a := .Args}}
	out.{{if .IsHeader}}Headers.{{end}}{{.FieldName}} = {{.ArgName}}
	{{- end}}
	return out
}

{{- if .Body }}
{{ .Body.Render }}
{{- if .BodyRenders }}
{{ .BodyRenders.Render }}
{{- end }}
{{- end }}

{{ if .Description }}// {{ .Name }} - {{ comment .Description }}{{ end }}
type {{.Name}} {{ call .StructGoTypeFn }}

{{ range $_, $oName := .UsedIn }}
func (r {{ $response.Name }}) write{{ $oName.OperationName }}(w http.ResponseWriter) {
    r.Write(w{{ if and $response.IsComponent (not $response.IsDefault) }}, {{ $oName.Status }}{{ end }})
}
{{ end }}

func (r {{.Name}}) Write(w http.ResponseWriter{{ if and (not .IsDefault) .IsComponent }}, code int{{ end }}) {
	{{- range .Headers}}
    {{- if not .Required }}
    if r.Headers.{{ .FieldName }}.IsSet {
    {{- else }}
    {
    {{- end }}
        {{ .Schema.RenderFormatStrings "hs" (print "r.Headers." .FieldName) true }}
        for _, h := range hs {
            w.Header().Add("{{ .Key }}", h)
        }
    }
	{{- end }}

	{{- if .ContentType }}
	w.Header().Set("Content-Type", "{{ .ContentType }}")
	{{- end }}
	w.WriteHeader({{if .IsDefault}}r.Code{{ else if .Status }}{{ .Status }}{{else}}code{{end}})
	{{if .IsBody}}writeJSON(w, r.Body, "{{.Name}}")
	{{end -}}
}
{{- end }}

{{/* ----------------------------- ResponseComponentAlias ------------------------------------- */}}
{{ define "ResponseComponentAlias" -}}
{{ if .Description }}// New{{ .Name }} - {{ comment .Description }}{{ end }}
func New{{ .Name }}({{range $i,$a := .Args}}{{if $i}}, {{end}}{{$a.ArgName}} {{call $a.GoTypeFn}}{{end}}) {{.HandlerName}}Response {
	return New{{ .Alias }}({{range $i,$a := .Args}}{{if $i}}, {{end}}{{$a.ArgName}}{{end}})
}

{{ if .Description }}// {{ .Name }} - {{ comment .Description }}{{ end }}
type {{.Name}} = {{ .Alias }}
{{- end }}
