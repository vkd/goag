{{/* ----------------------------- Components ------------------------------------- */}}
{{ define "Components" -}}
{{- template "Imports" .Imports }}

{{- if .Schemas }}
// ------------------------
//         Schemas
// ------------------------

{{range $_, $s := .Schemas}}
{{ $s.Render }}
{{end}}
{{- end}}

{{- if .Headers }}
// ------------------------
//         Headers
// ------------------------

{{range $_, $v := .Headers}}
{{ $v.Render }}
{{end}}
{{- end}}

{{- if and false .QueryParameters }}
// ---------------------------------
//         Query Parameters
// ---------------------------------

{{range $_, $v := .QueryParameters}}
{{ $v.Render }}
{{end}}
{{end}}

{{- if and false .HeaderParameters }}
// ----------------------------------
//         Header Parameters
// ----------------------------------

{{range $_, $v := .HeaderParameters}}
{{ $v.Render }}
{{end}}
{{end}}

{{- if and false .PathParameters }}
// --------------------------------
//         Path Parameters
// --------------------------------

{{range $_, $v := .PathParameters}}
{{ $v.Render }}
{{end}}
{{- end}}

{{- if .RequestBodies }}
// ------------------------------
//         RequestBodies
// ------------------------------

{{range $_, $v := .RequestBodies}}
{{ $v.Render }}
{{end}}
{{- end}}

{{- if .Responses }}
// ------------------------------
//         Responses
// ------------------------------

{{range $_, $v := .Responses}}
{{ $v.Render }}
{{end}}
{{- end}}
{{- end }}

{{/* ----------------------------- SchemaComponent ------------------------------------- */}}
{{ define "SchemaComponent" -}}
type {{ .Name }} {{ .Type.Render }}

{{- if not .IgnoreParseFormat }}
{{- if .IsMultivalue }}
func (c *{{ .Name }}) ParseStrings(s []string) error {
    {{ .Type.ParseString "v" "s" true newError }}
    *c = {{ .Name }}(v)
    return nil
}

func (q {{ .Name }}) Strings() []string {
    {{ .Type.RenderFormat (print .Type.Render "(q)") }}
}
{{- else }}
func (c *{{ .Name }}) Parse(s string) error {
    {{ .Type.ParseString "v" "s" true newError }}
    *c = {{ .Name }}(v)
    return nil
}

func (q {{ .Name }}) String() string {
    return {{ .Type.RenderFormat (print .Type.Render "(q)") }}
}
{{- end }}
{{- end }}
{{- end }}

{{/* ----------------------------- HeaderComponent ------------------------------------- */}}
{{ define "HeaderComponent" -}}
{{- if .Description }}// {{ .Name }} - {{ .Description }}
{{ end -}}
type {{ .Name }} {{ .Type.Render }}

func (h {{ .Name }}) String() string {
    return {{ .Type.RenderFormat (print .Type.Render "(h)") }}
}

func (c *{{ .Name }}) Parse(s string) error {
    var v {{ .Name }}
    {{ .Type.ParseString "v" "s" false newError }}
    *c = v
    return nil
}
{{- end }}

{{/* ----------------------------- RequestBodyComponent ------------------------------------- */}}
{{ define "RequestBodyComponent" -}}
type {{ .Name }} {{ .Type.Render }}
{{- end }}

{{/* ----------------------------- QueryParameterComponent ------------------------------------- */}}
{{ define "QueryParameterComponent" -}}
type {{ .Name }} {{ .Type.Render }}

func (q *{{ .Name }}) ParseQuery(vs []string) error {
{{- if .IsStringsParser }}
    /*var v {{ .Type.Render }}
    {{ .Type.ParseString "v" "vs" true newError }}
    err := v.ParseStrings(vs)
    if err != nil {
        return fmt.Errorf("parse query for {{ .Type.Render }} type: %w", err)
    }*/
    {{ .Type.ParseString "v" "vs" true newError }}
{{- else if .IsArray }}
    {{ .Type.ParseString "v" "vs" true newError }}
{{- else }}
    {{ .Type.ParseString "v" "vs[0]" true newError }}
{{- end }}
    *q = {{ .Name }}(v)
    return nil
}

func (q {{ .Name }}) Strings() []string {
{{- if .IsStringsParser }}
    return {{ .Type.Render }}(q).Strings()
{{- else if .IsArray }}
    {{ .Type.RenderFormat "q" }}
{{- else }}
    return []string{ {{ .Type.RenderFormat (print .Type.Render "(q)") }} }
{{- end }}
}
{{- end }}

{{/* ----------------------------- HeaderParameterComponent ------------------------------------- */}}
{{ define "HeaderParameterComponent" -}}
type {{ .Name }} {{ .Type.Render }}

func (h *{{ .Name }}) Parse(s string) error {
    var v {{ .Type.Render }}
    {{ .Type.ParseString "v" "s" false newError }}
    *h = {{ .Name }}(v)
    return nil
}

func (h {{ .Name }}) String() string {
    return {{ .Type.RenderFormat (print .Type.Render "(h)") }}
}
{{- end }}

{{/* ----------------------------- PathParameterComponent ------------------------------------- */}}
{{ define "PathParameterComponent" -}}
type {{ .Name }} {{ .Type.Render }}

func (q *{{ .Name }}) Parse(s string) error {
    var v {{ .Type.Render }}
    {{ .Type.ParseString "v" "s" false newError }}
    *q = {{ .Name }}(v)
    return nil
}

func (q {{ .Name }}) String() string {
    return {{ .Type.RenderFormat (print .Type.Render "(q)") }}
}
{{- end }}

{{/* ----------------------------- ResponseComponent ------------------------------------- */}}
{{ define "ResponseComponent" -}}
{{- $response := . -}}
func New{{.Name}}({{range $i,$a := .Args}}{{if $i}}, {{end}}{{$a.ArgName}} {{$a.Type.Render}}{{end}}) {{.HandlerName}}Response {
	var out {{.Name}}
	{{- range $_, $a := .Args}}
	out.{{if .IsHeader}}Headers.{{end}}{{.FieldName}} = {{.ArgName}}
	{{- end}}
	return out
}

{{- if .Body }}
type {{.BodyTypeName.Render}} {{ .Body.Render }}
{{- if .BodyRenders }}
{{ .BodyRenders.Render }}
{{- end }}
{{- end }}

{{ if .Description }}// {{ .Name }} - {{ .Description }}{{ end }}
type {{.Name}} {{.Struct.Render}}

{{ range $_, $oName := .UsedIn }}
func (r {{ $response.Name }}) write{{ $oName.OperationName }}(w http.ResponseWriter) {
    r.Write(w{{ if and $response.IsComponent (not $response.IsDefault) }}, {{ $oName.Status }}{{ end }})
}
{{ end }}

func (r {{.Name}}) Write(w http.ResponseWriter{{ if and (not .IsDefault) .IsComponent }}, code int{{ end }}) {
	{{- range $_, $h := .Headers}}
		{{- if .IsMultivalue }}
	for _, h := range r.Headers.{{ $h.FieldName }} {
		w.Header().Add("{{$h.Key}}", {{ $h.Formatter.RenderFormat "h" }})
	}
		{{- else }}
	w.Header().Set("{{$h.Key}}", r.Headers.{{ $h.Formatter.RenderFormat $h.FieldName }})
		{{- end }}
	{{- end }}
	{{- if .ContentType }}
	w.Header().Set("Content-Type", "{{ .ContentType }}")
	{{- end }}
	w.WriteHeader({{if .IsDefault}}r.Code{{ else if .Status }}{{ .Status }}{{else}}code{{end}})
	{{if .IsBody}}writeJSON(w, r.Body, "{{.Name}}")
	{{end -}}
}
{{- end }}

{{/* ----------------------------- ResponseComponentAlias ------------------------------------- */}}
{{ define "ResponseComponentAlias" -}}
{{ if .Description }}// New{{ .Name }} - {{ .Description }}{{ end }}
func New{{ .Name }}({{range $i,$a := .Args}}{{if $i}}, {{end}}{{$a.ArgName}} {{$a.Type.Render}}{{end}}) {{.HandlerName}}Response {
	return New{{ .Alias }}({{range $i,$a := .Args}}{{if $i}}, {{end}}{{$a.ArgName}}{{end}})
}

{{ if .Description }}// {{ .Name }} - {{ .Description }}{{ end }}
type {{.Name}} = {{ .Alias }}
{{- end }}
