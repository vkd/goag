{{/* ----------------------------- Bool ------------------------------------- */}}

{{ define "BoolParser" -}}
{{ .To.Render }}, err := strconv.ParseBool({{ .From.Render }})
if err != nil {
	return zero, {{ .MkErr.Wrap "parse bool"}}
}
{{- end }}

{{ define "BoolFormat" }}strconv.FormatBool({{ .From.Render }}){{ end }}

{{/* ----------------------------- Int ------------------------------------- */}}

{{ define "IntParser" -}}
vInt, err := strconv.ParseInt({{ .From.Render }}, 10, 0)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse int"}}
}
{{ .To.Render }} := int(vInt)
{{- end }}

{{ define "IntFormat" }}strconv.FormatInt(int64({{ .From.Render }}), 10){{ end }}

{{/* ----------------------------- Int32 ------------------------------------- */}}

{{ define "Int32Parser" -}}
vInt, err := strconv.ParseInt({{ .From.Render }}, 10, 32)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse int32"}}
}
{{ .To.Render }} := int32(vInt)
{{- end }}

{{ define "Int32Format" }}strconv.FormatInt(int64({{ .From.Render }}), 10){{ end }}

{{/* ----------------------------- Int64 ------------------------------------- */}}

{{ define "Int64Parser" -}}
{{ .To.Render }}, err := strconv.ParseInt({{ .From.Render }}, 10, 64)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse int64"}}
}
{{- end }}

{{ define "Int64Format" }}strconv.FormatInt({{ .From.Render }}, 10){{ end }}

{{/* ----------------------------- Float32 ------------------------------------- */}}

{{ define "Float32Parser" -}}
vFloat, err := strconv.ParseFloat({{ .From.Render }}, 32)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse float32"}}
}
{{ .To.Render }} := float32(vFloat)
{{- end }}

{{ define "Float32Format" }}strconv.FormatFloat(float64({{ .From.Render }}), 'e', -1, 32){{ end }}

{{/* ----------------------------- Float64 ------------------------------------- */}}

{{ define "Float64Parser" -}}
{{ .To.Render }}, err := strconv.ParseFloat({{ .From.Render }}, 64)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse float64"}}
}
{{- end }}

{{ define "Float64Format" }}strconv.FormatFloat({{ .From.Render }}, 'e', -1, 64){{ end }}

{{/* ----------------------------- CustomType ------------------------------------- */}}

{{ define "CustomTypeParser" -}}
{{ .To.Render }}, err := strconv.ParseFloat({{ .From.Render }}, 64)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse float64"}}
}
{{- end }}

{{ define "CustomTypeFormat" }}{{ .From.Render }}.String(){{ end }}

{{/* ----------------------------- SliceType ------------------------------------- */}}

{{ define "SliceType" }}[]{{ render .Items }}{{ end }}

{{/* ----------------------------- StructureType ------------------------------------- */}}

{{ define "StructureType" }}struct{
{{- range $_, $f := .Fields }}
{{ render $f }}
{{- end -}}
}{{ end }}

{{/* ----------------------------- StructureField ------------------------------------- */}}

{{ define "StructureField" }}
{{- if .Comment }}// {{ .Comment }}
{{ end -}}
{{ .Name }} {{ render .Type }} {{ if .Tags -}}
`
{{- range $ti, $t := .Tags }}{{ $t.Key }}:"
{{- range $vi, $v := $t.Values }}{{ $v }}{{ if $vi }},{{ end }}{{ end -}}
"{{ if $ti }} {{ end }}{{ end -}}
`
{{- end }}{{ end }}
