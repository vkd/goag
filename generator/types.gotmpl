{{/* ----------------------------- SliceType ------------------------------------- */}}

{{ define "SliceType" }}[]{{ .Items.Render }}{{ end }}

{{ define "Slice_RenderFormatStrings" -}}
qv := make([]string, 0, len({{ .From }}))
for _, v := range {{ .From }} {
	qv = append(qv, {{ .Items.RenderFormat "v" }})
}
{{ .To }} {{ if .IsNew }}:{{ end }}= qv
{{- end }}

{{ define "SliceType_RenderFormatMultiline" -}}
{{ .To }} := make([]string, 0, len({{ .From }}))
for _, v := range {{ .From }} {
	{{ .To }} = append({{ .To }}, {{ .Items.RenderFormat "v" }})
}
{{- end }}

{{ define "SliceType_ParseString" }}
{{- .To}} {{ if .IsNew }}:{{ end }}= make([]{{ .Items.Render }}, 1)
{{ .Items.ParseString (print .To "[0]") .From  .IsNew .MkErr }}
{{- end }}

{{ define "SliceType_ParseStrings" }}
{{- .To}} {{ if .IsNew }}:{{ end }}= make([]{{ .Items.Render }}, len({{.From}}))
for i := range {{.From}} {
	{{ .Items.ParseString (print .To "[i]") (print .From "[i]") false .MkErr }}
}
{{- end }}


{{/* ----------------------------- StructureType ------------------------------------- */}}

{{ define "StructureType" }}
{{- if.Fields }}struct{
{{- range $_, $f := .Fields }}
{{ $f.Render }}
{{- end }}
{{- if .AdditionalProperties }}
AdditionalProperties map[string]{{ .AdditionalProperties.Render }} `json:"-"`
{{- end }}
}
{{- else }}struct{}
{{- end }}
{{- end }}

{{ define "StructureTypeRenderFormat" -}}
bs, err := json.Marshal({{ .From }})
if err != nil {
	return {{ .MkErr.Wrap "marshal json" "err" }}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= []string{string(bs)}
{{- end }}

{{ define "StructureTypeParseString" -}}
err := json.Unmarshal([]byte({{ .From }}), &{{ .To }})
if err != nil {
	return {{ .MkErr.Wrap "unmarshal json" "err" }}
}
{{- end }}


{{/* ----------------------------- StructureField ------------------------------------- */}}

{{ define "StructureField" }}
{{- if .Comment }}// {{ .Comment }}
{{ end -}}
{{ .Name }} {{ .Type.Render }} {{ if .Tags -}}
`
{{- range $ti, $t := .Tags }}{{ $t.Key }}:"
{{- range $vi, $v := $t.Values }}{{ $v }}{{ if $vi }},{{ end }}{{ end -}}
"{{ if $ti }} {{ end }}{{ end -}}
`
{{- end }}{{ end }}


{{/* ----------------------------- OptionalType ------------------------------------- */}}

{{ define "OptionalTypeParseString" -}}
{{ .Type.ParseString "v" .From true .MkErr }}
{{- if .IsNew }}
var {{ .To }} {{ .Self.Render }}
{{- end }}
{{ .To }}.Set(v)
{{- end }}

{{ define "OptionalTypeParseStrings" -}}
{{ .Type.ParseStrings "v" .From true .MkErr }}
{{- if .IsNew }}
var {{ .To }} {{ .Self.Render }}
{{- end }}
{{ .To }}.Set(v)
{{- end }}


{{/* ----------------------------- MapType ------------------------------------- */}}

{{ define "MapType" -}}
map[{{ .Key.Render }}]{{ .Value.Render }}
{{- end }}
