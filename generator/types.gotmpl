{{/* ----------------------------- Bool ------------------------------------- */}}

{{ define "BoolParseString" -}}
{{- if not .IsNew }}
var err error
{{- end }}
{{ .To }}, err {{ if .IsNew }}:{{ end }}= strconv.ParseBool({{ .From }})
if err != nil {
	return zero, {{ .MkErr.Wrap "parse bool"}}
}
{{- end }}

{{ define "BoolFormat" }}strconv.FormatBool({{ .From }}){{ end }}

{{/* ----------------------------- Int ------------------------------------- */}}

{{ define "IntParser" -}}
vInt, err := strconv.ParseInt({{ .From }}, 10, 0)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse int"}}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= int(vInt)
{{- end }}

{{ define "IntFormat" }}strconv.FormatInt(int64({{ .From }}), 10){{ end }}

{{/* ----------------------------- Int32 ------------------------------------- */}}

{{ define "Int32Parser" -}}
vInt, err := strconv.ParseInt({{ .From }}, 10, 32)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse int32"}}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= int32(vInt)
{{- end }}

{{ define "Int32Format" }}strconv.FormatInt(int64({{ .From }}), 10){{ end }}

{{/* ----------------------------- Int64 ------------------------------------- */}}

{{ define "Int64Parser" -}}
{{- if not .IsNew }}
var err error
{{- end }}
{{- .To }}, err {{ if .IsNew }}:{{ end }}= strconv.ParseInt({{ .From }}, 10, 64)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse int64"}}
}
{{- end }}

{{ define "Int64Format" }}strconv.FormatInt({{ .From }}, 10){{ end }}

{{/* ----------------------------- Float32 ------------------------------------- */}}

{{ define "Float32Parser" -}}
vFloat, err := strconv.ParseFloat({{ .From }}, 32)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse float32"}}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= float32(vFloat)
{{- end }}

{{ define "Float32Format" }}strconv.FormatFloat(float64({{ .From }}), 'e', -1, 32){{ end }}

{{/* ----------------------------- Float64 ------------------------------------- */}}

{{ define "Float64Parser" -}}
{{- if not .IsNew }}
var err error
{{- end }}
{{- .To }}, err {{ if .IsNew }}:{{ end }}= strconv.ParseFloat({{ .From }}, 64)
if err != nil {
	return zero, {{ .MkErr.Wrap "parse float64"}}
}
{{- end }}

{{ define "Float64Format" }}strconv.FormatFloat({{ .From }}, 'e', -1, 64){{ end }}

{{/* ----------------------------- CustomType ------------------------------------- */}}

{{ define "CustomTypeParser" }}
var {{ .To }} {{ .Type }}
err := {{ .To }}.UnmarshalText([]byte({{.From}}))
if err != nil {
	return zero, {{.MkErr.Wrap (print "unmarshal text")}}
}
{{- end }}

{{ define "CustomTypeFormat" }}{{ .From }}.String(){{ end }}

{{/* ----------------------------- SliceType ------------------------------------- */}}

{{ define "SliceType" }}[]{{ render .Items }}{{ end }}

{{ define "SliceTypeParseString" }}
{{- .To}} {{ if .IsNew }}:{{ end }}= make([]{{ .Items.Render }}, 1)
{{ .Items.ParseString (print .To "[0]") .From  .IsNew .MkErr }}
{{- end }}

{{ define "SliceTypeParseStrings" }}
{{- .To}} = make([]{{ .ItemsRender.Render }}, len({{.From}}))
for i := range {{.From}} {
	{{ .Items.ParseString (print .To "[i]") (print .From "[i]") .IsNew .MkErr }}
}
{{- end }}

{{/* ----------------------------- StructureType ------------------------------------- */}}

{{ define "StructureType" }}
{{- if.Fields }}struct{
{{- range $_, $f := .Fields }}
{{ render $f }}
{{- end }}
}
{{- else }}struct{}
{{- end }}
{{- end }}


{{/* ----------------------------- StructureField ------------------------------------- */}}

{{ define "StructureField" }}
{{- if .Comment }}// {{ .Comment }}
{{ end -}}
{{ .Name }} {{ render .Type }} {{ if .Tags -}}
`
{{- range $ti, $t := .Tags }}{{ $t.Key }}:"
{{- range $vi, $v := $t.Values }}{{ $v }}{{ if $vi }},{{ end }}{{ end -}}
"{{ if $ti }} {{ end }}{{ end -}}
`
{{- end }}{{ end }}


{{/* ----------------------------- PointerType ------------------------------------- */}}

{{ define "PointerTypeParseString" -}}
{{ .From.Render }}
{{ .To }} {{ if .IsNew }}:{{ end }}= &v
{{- end }}


{{/* ----------------------------- MapType ------------------------------------- */}}

{{ define "MapType" -}}
map[{{ .Key.Render }}]{{ .Value.Render }}
{{- end }}
