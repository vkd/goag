{{/* ----------------------------- SliceType ------------------------------------- */}}

{{ define "SliceType" }}[]{{ call .ItemsRender }}{{ end }}

{{ define "Slice_RenderFormatStrings" -}}
qv := make([]string, 0, len({{ .From }}))
for _, v := range {{ .From }} {
	qv = append(qv, {{ call .ItemsRenderFormat "v" }})
}
{{ .To }} {{ if .IsNew }}:{{ end }}= qv
{{- end }}

{{ define "SliceType_ParseString" }}
{{- .To}} {{ if .IsNew }}:{{ end }}= make([]{{ call .ItemsRender }}, 1)
{{ call .ItemsParseString (print .To "[0]") .From  .IsNew .MkErr }}
{{- end }}

{{ define "SliceType_ParseStrings" }}
{{- .To}} {{ if .IsNew }}:{{ end }}= make([]{{ call .ItemsRender }}, len({{.From}}))
for i := range {{.From}} {
	{{ call .ItemsParseString (print .To "[i]") (print .From "[i]") false .MkErr }}
}
{{- end }}


{{/* ----------------------------- StructureType ------------------------------------- */}}

{{ define "StructureType" }}
{{- if or .Fields .AdditionalProperties }}struct{
	{{- range $_, $f := .Fields }}
	{{ $f.Render }}
	{{- end }}
	{{- if .AdditionalProperties }}
	AdditionalProperties map[string]{{ .AdditionalProperties.Render }} `json:"-"`
	{{- end }}
}
{{- else }}struct{}
{{- end }}
{{- end }}


{{/* ----------------------------- StructureField ------------------------------------- */}}

{{ define "StructureField" }}
{{- if .Comment }}// {{ .Comment }}
{{ end -}}
{{ .Name }} {{ .Type.Render }} {{ if .Tags -}}
`
{{- range $ti, $t := .Tags }}{{ $t.Key }}:"
{{- range $vi, $v := $t.Values }}{{ $v }}{{ if $vi }},{{ end }}{{ end -}}
"{{ if $ti }} {{ end }}{{ end -}}
`
{{- end }}{{ end }}


{{/* ----------------------------- CustomType ------------------------------------- */}}

{{ define "CustomType_ParseString" }}
{{- .Base.ParseString "vCustom" .From true .MkErr }}
{{ if .IsNew }}var {{ .To }} {{ .CustomType }}
{{ end -}}
{
	err := {{ .To }}.Parse{{ .Base.FuncTypeName }}(vCustom)
	if err != nil {
		return {{.MkErr.Wrap (print "parse custom type") "err" }}
	}
}
{{- end }}


{{ define "CustomType_ParseStrings" }}
{{- .Base.ParseStrings "vCustom" .From true .MkErr }}
{{ if .IsNew }}var {{ .To }} {{ .CustomType }}
{{ end -}}
{
	err := {{ .To }}.Parse{{ .Base.FuncTypeName }}(vCustom)
	if err != nil {
		return {{.MkErr.Wrap (print "parse custom type") "err" }}
	}
}
{{- end }}


{{ define "CustomType_RenderFormatStrings" -}}
cv := {{ .From }}.{{ .Base.FuncTypeName }}()
{{ .Base.RenderFormatStrings .To "cv" .IsNew }}
{{- end }}


{{/* ----------------------------- OptionalType ------------------------------------- */}}

{{ define "OptionalTypeParseString" -}}
{{ .Type.ParseString "v" .From true .MkErr }}
{{- if .IsNew }}
var {{ .To }} {{ .Self.Render }}
{{- end }}
{{ .To }}.Set(v)
{{- end }}

{{ define "OptionalTypeParseStrings" -}}
{{ .Type.ParseStrings "v" .From true .MkErr }}
{{- if .IsNew }}
var {{ .To }} {{ .Self.Render }}
{{- end }}
{{ .To }}.Set(v)
{{- end }}


{{/* ----------------------------- MapType ------------------------------------- */}}

{{ define "MapType" -}}
map[{{ .Key.Render }}]{{ .Value.Render }}
{{- end }}
