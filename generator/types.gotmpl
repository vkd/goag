{{/* ----------------------------- SliceType ------------------------------------- */}}

{{ define "SliceType_GoType" }}[]{{ call .GoTypeFn }}{{ end }}

{{ define "Slice_RenderToBaseType" -}}
if {{ .From }} == nil {
	{{ .From }} = {{ call .RenderGoTypeFn }}{}
}
{{ .To }} = {{ .From }}
{{- end }}

{{ define "Slice_RenderFormatStrings" -}}
qv := make([]string, 0, len({{ .From }}))
for _, v := range {{ .From }} {
	qv = append(qv, {{ call .ItemsRenderFormatFn "v" }})
}
{{ .To }} {{ if .IsNew }}:{{ end }}= qv
{{- end }}

{{ define "SliceType_ParseString" }}
{{- .To}} {{ if .IsNew }}:{{ end }}= make([]{{ call .GoTypeFn }}, 1)
{{ call .ItemsParseString (print .To "[0]") .From  .IsNew .MkErr }}
{{- end }}

{{ define "SliceType_ParseStrings" }}
{{- .To}} {{ if .IsNew }}:{{ end }}= make([]{{ call .GoTypeFn }}, len({{.From}}))
for i := range {{.From}} {
	{{ call .ItemsParseString (print .To "[i]") (print .From "[i]") false .MkErr }}
}
{{- end }}

{{ define "SliceType_RenderUnmarshalJSON" -}}
var vs {{ .Self.RenderGoType }}
err = json.Unmarshal({{ .From }}, &vs)
if err != nil {
	return {{ .MkErr.Wrap "unmarshal slice" "err" }}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= vs
{{- end }}

{{ define "SliceType_RenderMarshalJSON" -}}
var vs {{ .Self.RenderGoType }}
err = json.Marshal({{ .From }}, &vs)
if err != nil {
	return {{ .MkErr.Wrap "marshal slice" "err" }}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= vs
{{- end }}


{{/* ----------------------------- StructureType ------------------------------------- */}}

{{ define "StructureType" }}
{{- if or .Fields .AdditionalProperties }}struct{
	{{- range $_, $f := .Fields }}
	{{ $f.Render }}
	{{- end }}
	{{- if .AdditionalProperties }}
	AdditionalProperties map[string]{{ .AdditionalProperties.RenderGoType }}
	{{- end }}
}
{{- else }}struct{}
{{- end }}
{{- end }}

{{ define "StructureType_RenderUnmarshalJSON" -}}
err = {{ .To }}.UnmarshalJSON({{ .From }})
if err != nil {
	return {{ .MkErr.Wrap "unmarshal object" "err" }}
}
{{- end }}

{{ define "StructureType_RenderMarshalJSON" -}}
{{ .To }}, err {{ if .IsNew }}:{{ end }}= {{ .From }}.MarshalJSON()
if err != nil {
	return {{ .MkErr.Wrap "marshal object" "err" }}
}
{{- end }}


{{/* ----------------------------- StructureField ------------------------------------- */}}

{{ define "StructureField" }}
{{- if .Comment }}// {{ .Comment }}
{{ end -}}
{{ if not .Embedded }}{{ .Name }} {{end }}{{ call .FieldTypeFn }}{{ end }}


{{/* ----------------------------- CustomType ------------------------------------- */}}

{{ define "CustomType_ParseString" }}
{{- .Base.ParseString "vCustom" .From true .MkErr }}
{{ if .IsNew }}var {{ .To }} {{ .CustomType }}
{{ end -}}
{
	err := {{ .To }}.Parse{{ .Base.FuncTypeName }}(vCustom)
	if err != nil {
		return {{.MkErr.Wrap (print "parse custom type") "err" }}
	}
}
{{- end }}


{{ define "CustomType_ParseStrings" }}
{{- .Base.ParseStrings "vCustom" .From true .MkErr }}
{{ if .IsNew }}var {{ .To }} {{ .CustomType }}
{{ end -}}
{
	err := {{ .To }}.Parse{{ .Base.FuncTypeName }}(vCustom)
	if err != nil {
		return {{.MkErr.Wrap (print "parse custom type") "err" }}
	}
}
{{- end }}

{{ define "CustomType_RenderFormatStrings" -}}
cv := {{ .From }}.{{ .Base.FuncTypeName }}()
{{ .Base.RenderFormatStrings .To "cv" .IsNew }}
{{- end }}

{{ define "CustomType_RenderUnmarshalJSON_Object" -}}
var a1 {{ .Base.RenderGoType }}
{{ .Base.RenderUnmarshalJSON "a1" .From true .MkErr }}
var ccc {{ .Base.RenderGoType }}
{{ .Base.RenderUnmarshalJSON "aaa" .From false .MkErr }}
cv := New{{ .CustomType }}(v)
{{ .To }} {{ if .IsNew }}:{{ end }}= cv
{{- end }}

{{ define "CustomType_RenderUnmarshalJSON" -}}
var baseV {{ .Base.RenderGoType }}
{{ .Base.RenderUnmarshalJSON "baseV" .From false .MkErr }}
var cv {{ .CustomType }}
err = cv.Set(baseV)
if err != nil {
	return {{ .MkErr.Wrap "parse" "err" }}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= cv
{{- end }}


{{ define "CustomType_RenderMarshalJSON_Object" -}}
// ---> CustomType MarshalJSON Object
cv := {{ .From }}.{{ .Base.FuncTypeName }}()
{{ .To }} {{ if .IsNew }}:{{ end }}= New{{ .CustomType }}FromSchema({{ .From }}.ToSchema{{ .CustomType }}())

// ---> CustomType MarshalJSON
var baseV {{ .Base.RenderGoType }}
{{ .Base.RenderMarshalJSON "baseV" .From false .MkErr }}
var cv {{ .CustomType }}
err = cv.Set(baseV)
if err != nil {
	return {{ .MkErr.Wrap "parse" "err" }}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= cv
// <--- CustomType MarshalJSON
// <--- CustomType MarshalJSON Object
{{- end }}

{{ define "CustomType_RenderMarshalJSON" -}}
// ---> CustomType MarshalJSON
var baseV {{ .Base.RenderGoType }}
{{ .Base.RenderMarshalJSON "baseV" .From false .MkErr }}
var cv {{ .CustomType }}
err = cv.Set(baseV)
if err != nil {
	return {{ .MkErr.Wrap "parse" "err" }}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= cv
// <--- CustomType MarshalJSON
{{- end }}


{{/* ----------------------------- OptionalType ------------------------------------- */}}

{{ define "OptionalTypeParseString" -}}
{{ .Type.ParseString "vOpt" .From true .MkErr }}
{{- if .IsNew }}
var {{ .To }} {{ .Self.RenderGoType }}
{{- end }}
{{ .To }}.Set(vOpt)
{{- end }}

{{ define "OptionalTypeParseStrings" -}}
{{- .Type.ParseStrings "vOpt" .From true .MkErr }}
{{- if .IsNew }}
var {{ .To }} {{ .Self.RenderGoType }}
{{- end }}
{{ .To }}.Set(vOpt)
{{- end }}

{{ define "OptionalType_RenderFormatStrings" -}}
{{ .Type.RenderFormatStrings .To (print .From ".Value") .IsNew }}
{{- end }}

{{ define "OptionalType_RenderToBaseType" -}}
if vOpt, ok := {{ .From }}.Get(); ok {
	{{ .Type.RenderToBaseType .To "vOpt" }}
}
{{- end }}

{{ define "OptionalType_RenderUnmarshalJSON" -}}
{{ .V.RenderUnmarshalJSON (print .To ".Value") .From false .MkErr }}
{{ .To }}.IsSet = true
{{- end }}

{{ define "OptionalType_RenderMarshalJSON" -}}
{{ .V.RenderMarshalJSON (print .To ".Value") .From false .MkErr }}
{{ .To }}.IsSet = true
{{- end }}


{{/* ----------------------------- NullableType ------------------------------------- */}}

{{ define "NullableTypeParseString" -}}
{{ .Type.ParseString "vPtr" .From true .MkErr }}
{{- if .IsNew }}
var {{ .To }} {{ .Self.RenderGoType }}
{{- end }}
{{ .To }}.Set(vPtr)
{{- end }}

{{ define "NullableTypeParseStrings" -}}
{{ .Type.ParseStrings "vPtr" .From true .MkErr }}
{{- if .IsNew }}
var {{ .To }} {{ .Self.RenderGoType }}
{{- end }}
{{ .To }}.Set(vPtr)
{{- end }}

{{ define "NullableType_RenderToBaseType" -}}
if vPtr, ok := {{ .From }}.Get(); ok { // NullableType_RenderToBaseType
	{{ .To }} = vPtr
}
{{- end }}

{{ define "NullableType_RenderUnmarshalJSON" -}}
var vPtr {{ .Self.RenderFieldType }}
if len({{ .From }}) != 4 || string({{ .From }}) != "null" {
	{{ .V.RenderUnmarshalJSON "v" .From true .MkErr }}
	vPtr.Set(v)
}
{{ .To }} {{ if .IsNew }}:{{ end }}= vPtr
{{- end }}

{{ define "NullableType_RenderMarshalJSON" -}}
if string({{ .From }}) != "null" {
	{{ .V.RenderMarshalJSON "v" .From true .MkErr }}
	var vPtr {{ .Self.RenderGoType }}
	vPtr.Set(v)
	{{ .To }} {{ if .IsNew }}:{{ end }}= vPtr
}
{{- end }}




{{/* ----------------------------- MapType ------------------------------------- */}}

{{ define "MapType" -}}
map[{{ .Key.Render }}]{{ .Value.Render }}
{{- end }}
