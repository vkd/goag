{{/* ----------------------------- Client ------------------------------------- */}}
{{ define "Client" }}

type Client struct {
	BaseURL    string
	HTTPClient HTTPClient
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

type HTTPClientFunc func(*http.Request) (*http.Response, error)

var _ HTTPClient = HTTPClientFunc(nil)

func (f HTTPClientFunc) Do(r *http.Request) (*http.Response, error) { return f(r) }

var _ HTTPClient = (*http.Client)(nil)

func NewClient(baseURL string, httpClient HTTPClient) *Client {
	return &Client{BaseURL: baseURL, HTTPClient: httpClient}
}

{{ range $_, $o := .Operations }}
	{{ $o.Render }}
{{- end }}

func (a API) LocalClient() *Client {
	return NewClient("", HTTPClientFunc(func(r *http.Request) (*http.Response, error) {
		w := httptest.NewRecorder()
		a.ServeHTTP(w, r)
		return w.Result(), nil
	}))
}
{{- end }}

{{/* ----------------------------- ClientOperation ------------------------------------- */}}
{{ define "ClientOperation" }}
// {{ .Name }} - {{ .HTTPMethod }} {{ .PathRaw }}{{ if .Description }}
// {{ comment .Description }}{{ end }}
func (c *Client) {{ .Name }}(ctx context.Context, request {{ .RequestTypeName }}) ({{ .ResponseTypeName }}, error) {
	var requestURL = c.BaseURL
	{{- range $_, $pr := .PathParams }} +
		{{- if .Prefix }} "{{ $pr.Prefix }}"{{ if .Param}} + {{ end }}{{ end }}

		{{- if .Param -}}
			url.PathEscape({{ .Param.RenderToStringInline "request.Path" }})
		{{- end }}
	{{- end }}

	{{- if .Queries }}

	query := make(url.Values, {{ len .Queries }})
	{{- range $_, $q := .Queries }}
		{{- $field := (print "request.Query." .FieldName) }}
		{{- if not .Required }}
	if qvOpt, ok := request.Query.{{ .FieldName }}.Get(); ok {
			{{- $field = "qvOpt" }}
		{{- end }}
		{{ call .RenderFormatStrings (print "query[\"" $q.Name "\"]") $field false }}
		{{- if not .Required }}
	}
		{{- end }}
	{{- end }}
	requestURL += "?" + query.Encode()
	{{ end }}

	{{ if .IsRequestBody -}}
	bs, err := json.Marshal(request.Body)
	if err != nil {
		return nil, fmt.Errorf("marshal request body: %w", err)
	}
	{{- end }}

	req, err := http.NewRequestWithContext(ctx, http.Method{{ .Method }}, requestURL, {{ if .IsRequestBody }}bytes.NewReader(bs){{ else if .IsBodyReader }}request.Body{{ else }}nil{{ end }})
	if err != nil {
		return nil, fmt.Errorf("new request: %w", err)
	}

	{{- range $_, $h := .Headers }}
		{{- $from := (print "request.Headers." $h.FieldName) }}
		{{- if not $h.Required }}
	if hvOpt, ok := {{ $from }}.Get(); ok {
		{{- $from = "hvOpt" }}
		req.Header.Set("{{ $h.Name }}", {{ $h.Type.RenderFormat $from }})
	}
		{{- else }}
	req.Header.Set("{{ $h.Name }}", {{ $h.Type.RenderFormat $from }})
		{{- end }}
	{{- end }}

	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("http client Do(): %w", err)
	}

	switch resp.StatusCode {
	{{- range $_, $response := .Responses }}
	case {{ $response.StatusCode }}:
		{{ $response.Render }}
	{{- end }}
	{{ if .DefaultResponse -}}
	default:
		{{ .DefaultResponse.Render }}
	{{- else }}
	default:
		if resp.Body != nil {
			defer resp.Body.Close()
		}
		return nil, fmt.Errorf("status code %d: not implemented", resp.StatusCode)
	{{- end }}
	}
}
{{ end }}

{{/* ----------------------------- ClientResponse ------------------------------------- */}}
{{ define "ClientResponse" }}
{{- if not .ContentReader -}}
if resp.Body != nil {
	defer resp.Body.Close()
}

{{ end -}}

var response {{ .ComponentRefName }}

{{- if eq .StatusCode "default" }}
	response.Code = resp.StatusCode
{{ end }}

{{- if .Headers }}
var hs []string
{{- end }}
{{- range $_, $h := .Headers }}
hs = resp.Header.Values("{{ .Key }}")
if len(hs) > 0 {
	{{ call .SchemaParseStrings (print "response.Headers." .FieldName) "hs" false (returns "nil" (parseError "header" .Key)) }}
{{- if .Required }}
} else {
	return nil, fmt.Errorf("response header '{{ .Key }}' is required")
{{- end }}
}
{{ end }}

{{- if .ContentJSON }}
err := json.NewDecoder(resp.Body).Decode(&response.Body)
if err != nil {
	return nil, fmt.Errorf("decode '{{ .ComponentRefName }}' response body: %w", err)
}
{{- else if .ContentReader }}
response.Body = resp.Body
{{- end }}
return response, nil
{{- end }}
