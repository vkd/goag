{{/* ----------------------------- Client ------------------------------------- */}}
{{ define "Client" }}

type Client struct {
	BaseURL    string
	HTTPClient HTTPClient
}

type HTTPClient interface {
	Do(*http.Request) (*http.Response, error)
}

type HTTPClientFunc func(*http.Request) (*http.Response, error)

var _ HTTPClient = HTTPClientFunc(nil)

func (f HTTPClientFunc) Do(r *http.Request) (*http.Response, error) { return f(r) }

var _ HTTPClient = (*http.Client)(nil)

func NewClient(baseURL string, httpClient HTTPClient) *Client {
	return &Client{BaseURL: baseURL, HTTPClient: httpClient}
}

{{ range $_, $o := .Operations }}
	{{ $o.Render }}
{{- end }}
{{- end }}

{{/* ----------------------------- ClientOperation ------------------------------------- */}}
{{ define "ClientOperation" }}
// {{ .Name }} - {{ .HTTPMethod }} {{ .PathRaw }}
func (c *Client) {{ .Name }}(ctx context.Context, request {{ .RequestTypeName }}) ({{ .ResponseTypeName }}, error) {
	var requestURL = c.BaseURL {{ range $_, $pr := .PathFormat }} + {{ $pr.Render }}{{ end }}

	{{ if .Queries }}
	query := make(url.Values, {{ len .Queries }})
	{{- range $_, $q := .Queries }}
		{{- with $q }}
		{{- if .Required }}
	{{ call .ExecuteFormat (print "query[\"" $q.Name "\"]") (print "request.Query." .FieldName) }}
		{{- else }}
	if request.Query.{{ .FieldName }}.IsSet {
		{{ call .ExecuteFormat (print "query[\"" $q.Name "\"]") (print "request.Query." .FieldName ".Value") }}
	}
		{{- end }}
		{{- end }}
	{{- end }}
	requestURL += "?" + query.Encode()
	{{ end }}

	{{ if .IsRequestBody -}}
	bs, err := json.Marshal(request.Body)
	if err != nil {
		return nil, fmt.Errorf("marshal request body: %w", err)
	}
	{{- end }}

	req, err := http.NewRequestWithContext(ctx, http.Method{{ .Method }}, requestURL, {{ if .IsRequestBody }}bytes.NewReader(bs){{ else }}nil{{ end }})
	if err != nil {
		return nil, fmt.Errorf("new request: %w", err)
	}

	{{- range $_, $h := .Headers }}
		{{- if not $h.Required }}
	if request.Headers.{{ $h.FieldName }}.IsSet {
		req.Header.Set("{{ $h.Name }}", {{ $h.Type.RenderFormat (print "request.Headers." $h.FieldName ".Value") }})
	}
		{{- else }}
	req.Header.Set("{{ $h.Name }}", {{ $h.Type.RenderFormat (print "request.Headers." $h.FieldName) }})
		{{- end }}
	{{- end }}

	resp, err := c.HTTPClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("http client Do(): %w", err)
	}

	if resp.Body != nil {
		defer resp.Body.Close()
	}

	switch resp.StatusCode {
	{{- range $_, $response := .Responses }}
	case {{ $response.StatusCode }}:
		{{ $response.Render }}
	{{- end }}
	{{ if .DefaultResponse.IsSet -}}
	default:
		{{ .DefaultResponse.Value.Render }}
	{{- else }}
	default:
		return nil, fmt.Errorf("status code %d: not implemented", resp.StatusCode)
	{{- end }}
	}
}
{{ end }}

{{/* ----------------------------- ClientQueryParameterFormatMultivalue ------------------------------------- */}}
{{ define "ClientQueryParameterFormatMultivalue" -}}
{{- .To }} = {{ .Type.RenderFormat .From }}
{{- end }}

{{/* ----------------------------- ClientQueryParameterFormat ------------------------------------- */}}
{{ define "ClientQueryParameterFormat" -}}
{{- .To }} = []string{ {{ .Formatter.RenderFormat .From }} }
{{- end }}

{{/* ----------------------------- ClientQueryParameterFormatToSliceStrings ------------------------------------- */}}
{{ define "ClientQueryParameterFormatToSliceStrings" -}}
{
    query_values := make([]string, 0, len({{ .From }}))
    for _, v := range {{ .From }} {
        query_values = append(query_values, {{ .Items.RenderFormat "v" }})
    }
	{{ .To }} = query_values
}
{{- end }}

{{/* ----------------------------- ClientResponse ------------------------------------- */}}
{{ define "ClientResponse" -}}
{{- if .ComponentRefName.IsSet -}}
var response {{ .ComponentRefName.Value }}Response
{{- else -}}
var response {{ .Name }}
{{- end }}

{{- if eq .StatusCode "default" }}
	response.Code = resp.StatusCode
{{ end }}

{{- if .Headers }}
var hs []string
{{- end }}
{{- range $_, $h := .Headers }}
	{{- if .IsMultivalue }}
	hs = resp.Header.Values("{{ .Key }}")
	{{- if .Required }}
	if len(hs) == 0 {
		return nil, fmt.Errorf("header parameter '{{ .Key }}': is required")
	}
	{{- end }}
	if len(hs) > 0 {
		{{ call .SchemaParseString (print "response.Headers." .FieldName) "hs" false (returns "nil" (parseError "header" .Key)) }}
	}
	{{- else }}
	hs = resp.Header.Values("{{ .Key }}")
	{{- if .Required }}
	if len(hs) == 0 {
		return nil, fmt.Errorf("header parameter '{{ .Key }}': is required")
	}
	{{- end }}
	if len(hs) > 0 {
		{{ call .SchemaParseString (print "response.Headers." .FieldName) "hs[0]" false (returns "nil" (parseError "header" .Key)) }}
	}
	{{- end }}
{{ end }}

{{- if .ContentJSON }}
err := json.NewDecoder(resp.Body).Decode(&response.Body)
if err != nil {
{{- if .ComponentRefName.IsSet }}
	return nil, fmt.Errorf("decode '{{ .ComponentRefName.Value }}Response' response body: %w", err)
{{- else }}
	return nil, fmt.Errorf("decode '{{ .Name }}' response body: %w", err)
{{- end }}
}
{{- end }}
return response, nil
{{- end }}
