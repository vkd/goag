{{/* ----------------------------- Router ------------------------------------- */}}
{{ define "Router" }}
{{- template "Imports" .Imports }}

type API struct {
	{{range $_, $h := .Operations}}
	{{$h.APIHandlerFieldName}} {{$h.HandlerTypeName}}
	{{- end}}

	// not found
	NotFoundHandler http.Handler
	// spec file
	SpecFileHandler http.Handler
	{{- if .Cors }}
	CORSHandler CorsHandlerFunc
	{{- end }}

	Middlewares []func(h http.Handler) http.Handler
	{{- if .JWT }}

	SecurityBearerAuth SecurityBearerAuthMiddleware
	{{- end }}
}
{{- if .Cors }}

type CorsHandlerFunc func(methods, headers []string) http.Handler
{{- end }}

func (rt *API) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	path := r.URL.Path

	if rt.SpecFileHandler != nil && path == "{{.BasePath}}/{{.SpecFilename}}" {
		rt.SpecFileHandler.ServeHTTP(rw, r)
		return
	}

	h, r := rt.Route(r)
	if h == nil {
		h = rt.NotFoundHandler
		if h == nil {
			h = http.NotFoundHandler()
		}
		h.ServeHTTP(rw, r)
		return
	}

	for i := len(rt.Middlewares) - 1; i >= 0; i-- {
		h = rt.Middlewares[i](h)
	}
	h.ServeHTTP(rw, r)
}

func (rt *API) Route(r *http.Request) (http.Handler, *http.Request) {
	h, path := rt.route(r.URL.Path, r.Method)
	if h == nil {
		return nil, r
	}

	r = r.WithContext(context.WithValue(r.Context(), pathKey{}, path))
	return h, r
}

{{ range $_, $r := .Routes }}
{{- template "Route" $r }}
{{ end }}

type pathKey struct{}

func SchemaPath(r *http.Request) (string, bool) {
	if s, ok := r.Context().Value(pathKey{}).(string); ok {
		return s, true
	}
	return r.URL.Path, false
}

var specFileBs = []byte(SpecFile)

func SpecFileHandler() http.Handler {
	return http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {
		rw.Header().Set("Content-Type", "application/{{.SpecFileExt}}")
		rw.WriteHeader(http.StatusOK)
		_, err := rw.Write(specFileBs)
		if err != nil {
			LogError(fmt.Errorf("serve spec file: %w", err))
		}
	})
}

{{- if .JWT }}
{{ template "JWTMiddleware" . }}
{{- end }}

func splitPath(s string) (string, string) {
	if !strings.HasPrefix(s, "/") {
		return s, ""
	}
	idx := strings.Index(s[1:], "/")
	if idx == -1 {
		return s, ""
	}
	return s[:idx+1], s[idx+1:]
}

{{- end }}


{{/* ----------------------------- Route ------------------------------------- */}}
{{ define "Route" }}
{{- $basePath := .BasePath }}
func (rt *API) route{{.Name}}(path, method string) (http.Handler, string) {
	{{- if and $basePath (not .Name) }}
	if !strings.HasPrefix(path, "{{$basePath}}") {
		return nil, ""
	}
	path = path[{{len $basePath }}:] // "{{$basePath}}"

	if !strings.HasPrefix(path, "/") {
		return nil, ""
	}

	{{ end -}}

	{{if or .PrefixPathItems .Routes}}prefix, path :{{else}}_, path {{end -}}= splitPath(path)

	{{if or .PrefixPathItems .Variable -}}
	if path == "" {
		{{if .PrefixPathItems -}}
		switch prefix {
			{{range $_, $h := .PrefixPathItems -}}
		case "{{.Prefix}}":
			switch method {
				{{- range $_, $m := .Operations}}
					{{- if .IsCORS }}
			case http.MethodOptions:
				if rt.CORSHandler == nil {
					return nil, ""
				}
				h := rt.CORSHandler([]string{ {{ range $i, $_ := .CORSMethods }}{{ if $i }}, {{ end }}"{{ . }}"{{ end }} }, []string{ {{ range $i, $_ := .CORSHeaders }}{{ if $i }}, {{ end }}"{{ . }}"{{ end }} })
					{{- else }}
			case http.Method{{ .Method }}:
				h := http.Handler(rt.{{ $m.Handler }})
						{{- if $h.RouterPathItem.JWT }}
				h = middlewares(h, rt.SecurityBearerAuth)
						{{- end }}
					{{- end }}
				return h, "{{.PathSpec}}"
				{{- end }}
			}
			{{end -}}
		}
		{{- end}}
		{{- if .Variable}}
		switch method {
            {{- $jwt := .Variable.JWT }}
			{{- range $_, $o := .Variable.Operations}}
				{{- if .IsCORS }}
		case http.MethodOptions:
			if rt.CORSHandler == nil {
				return nil, ""
			}
			h := rt.CORSHandler([]string{ {{ range $i, $_ := .CORSMethods }}{{ if $i }}, {{ end }}"{{ . }}"{{ end }} }, []string{ {{ range $i, $_ := .CORSHeaders }}{{ if $i }}, {{ end }}"{{ . }}"{{ end }} })
				{{- else }}
		case http.Method{{$o.Method}}:
			h := http.Handler(rt.{{ $o.Handler }})
					{{- if $jwt }}
			h = middlewares(h, rt.SecurityBearerAuth)
					{{- end }}
				{{- end }}
			return h, "{{.PathSpec}}"
			{{- end }}
		}
		{{- end}}
		return nil, ""
	}
	{{- end}}

	{{if or .Routes .VariableRoute -}}
		{{- $isVariableRoute := .VariableRoute }}
		{{- if .Routes -}}
	switch prefix {
			{{range $_, $r := .Routes -}}
	case "{{.Prefix}}":
				{{- if $isVariableRoute }}
		h, out := rt.route{{.Name}}(path, method)
		if h != nil {
			return h, out
		}
				{{- else }}
		return rt.route{{.Name}}(path, method)
				{{- end }}
			{{end -}}
	}
		{{- end}}

		{{- if .VariableRoute}}

	return rt.route{{.VariableRoute.Name}}(path, method)
		{{- else}}
	return nil, ""
		{{- end}}
	{{- else}}
	return nil, ""
	{{- end}}
}
{{- end }}


{{/* ----------------------------- JWTMiddleware ------------------------------------- */}}
{{ define "JWTMiddleware" }}
func middlewares(h http.Handler, ms ...interface {
	Middleware(http.Handler) http.Handler
}) http.Handler {
	for i := len(ms) - 1; i >= 0; i-- {
		h = ms[i].Middleware(h)
	}
	return h
}

type SecurityBearerAuthMiddleware func(w http.ResponseWriter, r *http.Request, token string, next http.Handler)

func (m SecurityBearerAuthMiddleware) Middleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var token string
		hs := r.Header.Values("Authorization")
		if len(hs) > 0 {
			token = strings.TrimPrefix(hs[0], "Bearer ")
		}

		m(w, r, token, next)
	})
}
{{- end }}
