{{/* ----------------------------- Schema------------------------------------- */}}

{{ define "Schema_Assign" -}}
{{- .To }} {{ if .IsNew }}:{{ end }}= {{ .From }}
{{- end }}


{{ define "Schema_Ref_ParseString" -}}
{{- $varName := (print "v" .FuncName) }}
{{- .Type.ParseString $varName .From true .MkErr }}
{{ .To }} {{ if .IsNew }}:{{ end }}= New{{ .Name }}({{ $varName }})
{{- end }}


{{ define "Schema_Ref_ParseStrings" -}}
{{- $varName := (print "v" .FuncName) }}
{{- .Type.ParseStrings $varName .From true .MkErr }}
{{ .To }} {{ if .IsNew }}:{{ end }}= New{{ .Name }}({{ $varName }})
{{- end }}

{{ define "Schema_RenderToBaseType" -}}
    {{- $isCustom := .Schema.IsCustom }}
    {{- $isNullable := .Schema.IsNullable }}
    {{- $from := .From }}
    {{- $to := .To }}
    {{- if .Schema.Ref }}
        {{- $isCustom = .Schema.Ref.Schema.IsCustom }}
        {{- $isNullable = .Schema.Ref.Schema.IsNullable }}
    {{- end -}}

    {{- if $isNullable -}}
        {{- $from = "vPtr" -}}
if vPtr, ok := {{ .From }}.Get(); ok {
    {{ end -}}

    {{- if .Schema.Ref -}}
        {{- if $isCustom -}}
            var vc {{ .Schema.Ref.Schema.CustomType.Value.RenderGoType }}
            {{ $to = "vc" }}
        {{- end -}}
        {{ $to }} = {{ $from }}
        {{- if $isCustom }}
            v = {{ .Schema.Ref.Name }}(vc.ToSchema{{ .Schema.Ref.Name }}())
        {{- end -}}
    {{- else -}}
        {{- if $isCustom -}}
            {{ $to }} = {{ $from }}
        {{- else -}}
            {{ .Schema.Type.RenderToBaseType $to $from }}
        {{- end -}}
    {{- end -}}
    {{- if $isNullable }}
}
    {{- end -}}
{{- end }}

{{ define "Schema_Ref_RenderUnmarshalJSON" -}}
{{ if .Ref.Schema.IsCustom -}}
    {{- if .IsNew }}var {{ .To }} {{ .Ref.Schema.CustomType.Value.RenderGoType }}
    {{ end -}}
    {{- if .Ref.Schema.IsNullable -}}
        var vNull {{ .Ref.Schema.RenderGoType }}
        if len({{ .From }}) != 4 || string({{ .From }}) != "null" {
    {{- end }}
    {{- $from := .From }}
    {{- $to := .To }}
    {{- if .IsCustomUnmarshalJSON }}
        {{- $to = "vRef" }}
    var {{ $to }} {{ .Ref.Name }}
    err = {{ $to }}.UnmarshalJSON({{ .From }})
    if err != nil {
        return {{ .MkErr.Wrap (print "unmarshal ref type '" .Ref.Name "'") "err" }}
    }
        {{- $from = "vRef" }}
        {{- $to = .To }}
    {{- else }}
        var vSchema {{ .Ref.Schema.Type.RenderGoType }}
        {{ .Ref.Schema.Type.RenderUnmarshalJSON "vSchema" .From false .MkErr }}
        {{- $from = "vSchema" }}
    {{- end }}


    var cv {{ .Ref.Schema.CustomType.Value.RenderGoType }}
    err = cv.SetFromSchema{{ .Ref.Name }}({{ .Ref.Schema.RenderTypeDefinition }}({{ $from }}))
    if err != nil {
        return {{ .MkErr.Wrap (print "set from schema") "err" }}
    }

    {{- if .Ref.Schema.IsNullable }}
    vNull.Set(cv)
}
        {{ .To }} = vNull
    {{- else }}
        {{ .To }} = cv
    {{- end }}
{{- else if .Ref.Schema.IsNullable -}}
    {{- if .IsNew }}var {{ .To }} {{ .Ref.Name }}
    {{ end -}}
    var vn {{ call .RenderFieldTypeFn }}
    if len({{ .From }}) != 4 || string({{ .From }}) != "null" {
        var v {{ .Name }}
        err = v.UnmarshalJSON({{ .From }})
        if err != nil {
            return {{ .MkErr.Wrap (print "unmarshal nullable ref type '" .Name "'") "err" }}
        }
        vn.Set(v)
    }
    {{ .To }} = vn
{{- else -}}
    {{- if .IsNew }}var {{ .To }} {{ .Ref.Name }}
    {{ end -}}
    err = {{ .To }}.UnmarshalJSON({{ .From }})
    if err != nil {
        return {{ .MkErr.Wrap (print "unmarshal ref type '" .Ref.Name "'") "err" }}
    }
{{- end }}
{{- end }}

{{ define "Schema_Custom_RenderUnmarshalJSON" -}}
{{ if .IsNew }}var {{ .To }} {{ .CustomType.RenderGoType }}
{{ end -}}
    {{- if .Schema.IsNullable -}}
var vNull {{ .Schema.RenderGoType }}
if len({{ .From }}) != 4 || string({{ .From }}) != "null" {
    {{- end }}

    var v {{ .Schema.Type.RenderGoType }}
    {{ .Schema.Type.RenderUnmarshalJSON "v" .From .IsNew .MkErr }}

    var cv {{ .CustomType.RenderGoType }}
    err = cv.SetFromSchema{{ .Schema.FuncTypeName }}({{ .Schema.RenderTypeDefinition }}(v))
    if err != nil {
        return {{ .MkErr.Wrap (print "set from schema") "err" }}
    }

    {{- if .Schema.IsNullable }}
    vNull.Set(cv)
}
    {{ .To }} = vNull
    {{- else }}
    {{ .To }} = cv
    {{- end }}
{{- end }}

{{ define "Schema_RenderUnmarshalJSON" -}}
{{ if .Schema.IsNullable -}}
var vn {{ call .RenderGoTypeFn }}
if len({{ .From }}) != 4 || string({{ .From }}) != "null" {
    {{ .Schema.Type.RenderUnmarshalJSON "v" .From true .MkErr }}
    vn.Set(v)
}
{{ .To }} = vn
{{- else -}}
    {{ .Schema.Type.RenderUnmarshalJSON .To .From .IsNew .MkErr }}
{{- end }}
{{- end }}

{{ define "Schema_Ref_CustomType_RenderMarshalJSON" -}}
var v {{ .Ref.Name }}
{{ .Schema.RenderToBaseType .To .From }}
{{ .Ref.Schema.RenderMarshalJSON .To "v" true .MkErr }}
{{- end }}

{{ define "Schema_Ref_RenderMarshalJSON" -}}
{{ .Ref.Schema.RenderMarshalJSON .To .From .IsNew .MkErr }}
{{- end }}
