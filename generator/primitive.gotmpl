{{/* ----------------------------- Primitive ------------------------------------- */}}

{{ define "Primitive_RenderFormatStrings" -}}
{{- .To }} {{ if .IsNew }}:{{ end }}= []string{ {{ call .RenderFormat .From }} }
{{- end }}

{{/* ----------------------------- Bool ------------------------------------- */}}

{{ define "Bool_RenderStringParser" -}}
{{- if not .IsNew -}}
var err error
{{ end }}
{{- .To }}, err {{ if .IsNew }}:{{ end }}= strconv.ParseBool({{ .From }})
if err != nil {
	return {{ .MkErr.Wrap "parse bool" "err" }}
}
{{- end }}

{{ define "Bool_RenderToString" }}strconv.FormatBool({{ .From }}){{ end }}

{{/* ----------------------------- Int64 ------------------------------------- */}}

{{ define "Int64_RenderStringParser" -}}
{{- if not .IsNew -}}
var err error
{{ end }}
{{- .To }}, err {{ if .IsNew }}:{{ end }}= strconv.ParseInt({{ .From }}, 10, 64)
if err != nil {
	return {{ .MkErr.Wrap "parse int64" "err" }}
}
{{- end }}

{{ define "Int64_RenderToString" }}strconv.FormatInt({{ .From }}, 10){{ end }}

{{/* ----------------------------- IntX ------------------------------------- */}}

{{ define "IntX_RenderStringParser" -}}
vInt64, err := strconv.ParseInt({{ .From }}, 10, {{ .BitSize }})
if err != nil {
	return {{ .MkErr.Wrap (print "parse " .GoType) "err" }}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= {{ .GoType }}(vInt64)
{{- end }}

{{ define "IntX_RenderToString" }}strconv.FormatInt(int64({{ .From }}), 10){{ end }}

{{/* ----------------------------- FloatX ------------------------------------- */}}

{{ define "FloatX_RenderStringParser" -}}
vFloat, err := strconv.ParseFloat({{ .From }}, {{ .BitSize }})
if err != nil {
	return {{ .MkErr.Wrap (print "parse " .GoType) "err" }}
}
{{ .To }} {{ if .IsNew }}:{{ end }}= {{ .GoType }}(vFloat)
{{- end }}

{{ define "FloatX_RenderToString" }}strconv.FormatFloat(float64({{ .From }}), 'e', -1, {{ .BitSize }}){{ end }}

{{/* ----------------------------- Float64 ------------------------------------- */}}

{{ define "Float64_RenderStringParser" -}}
{{- if not .IsNew -}}
var err error
{{ end }}
{{- .To }}, err {{ if .IsNew }}:{{ end }}= strconv.ParseFloat({{ .From }}, 64)
if err != nil {
	return {{ .MkErr.Wrap "parse float64" "err" }}
}
{{- end }}

{{ define "Float64_RenderToString" }}strconv.FormatFloat({{ .From }}, 'e', -1, 64){{ end }}

{{/* ----------------------------- DateTime ------------------------------------- */}}

{{ define "DateTime_RenderStringParser" -}}
{{- if not .IsNew -}}
var err error
{{ end }}
{{- .To }}, err {{ if .IsNew }}:{{ end }}= time.Parse({{ .Layout }}, {{ .From }})
if err != nil {
	return {{ .MkErr.Wrap "parse time.Time" "err" }}
}
{{- end }}

{{ define "DateTime_RenderToString" }}{{ .From }}.Format({{ .Layout }}){{ end }}
