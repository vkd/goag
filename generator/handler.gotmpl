{{/* ----------------------------- Handler ------------------------------------- */}}
{{ define "Handler" }}
{{- $h := . }}
{{- $name := $h.Name}}
{{- $handlerFunc := $h.HandlerFuncName }}
{{- $requestParser := print $name "Request" }}
{{- $httpRequestParser := print "" $name "HTTPRequest" }}
{{- $request := print $name "Params" }}
{{- $newParams := print "new" $name "Params" }}
{{- $responseWriter := print $name "Response" }}
// ---------------------------------------------
// {{$name}} - {{$h.Description}}
// ---------------------------------------------

{{if $h.Summary}}// {{$handlerFunc}} - {{$h.Summary}}{{end}}
type {{ $handlerFunc }} func(ctx context.Context, r {{$requestParser}}) {{$responseWriter}}

func (f {{$handlerFunc}}) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	f(r.Context(), {{$httpRequestParser}}(r)).write{{ .Name }}(w)
}

type {{$requestParser}} interface {
	HTTP() *http.Request
	Parse() {{if $h.CanParseError}}({{end}}{{$request}}{{if $h.CanParseError}}, error){{end}}
}

func {{ $httpRequestParser }}(r *http.Request) {{ $requestParser }} {
	return {{ private $httpRequestParser }}{r}
}

type {{ private $httpRequestParser }} struct {
	Request *http.Request
}

func (r {{ private $httpRequestParser }}) HTTP() *http.Request { return r.Request }

func (r {{ private $httpRequestParser }}) Parse() {{if $h.CanParseError}}({{end}}{{$request}}{{if $h.CanParseError}}, error){{end}} {
	return {{$newParams}}(r.Request)
}

type {{$request}} struct {
	{{ if $h.Parameters.Query }}
	Query struct{
		{{ range $_, $p := .Parameters.Query }}
		{{ $p.HandlerParameter.Render }}
		{{ end }}
	}
	{{ end }}

	{{ if $h.Parameters.Path }}
	Path struct{
		{{ range $_, $p := .Parameters.Path }}
		{{ $p.HandlerParameter.Render }}
		{{ end }}
	}
	{{ end }}

	{{ if $h.Parameters.Header }}
	Headers struct{
		{{ range $_, $p := .Parameters.Header }}
		{{ $p.HandlerParameter.Render }}
		{{ end }}
	}
	{{ end }}

	{{ if $h.Body.TypeName }}
	Body {{ $h.Body.TypeName.Render }}
	{{ end }}
}

func {{ $newParams }}(r *http.Request) (zero {{ $request }}{{ if $h.CanParseError }}, _ error{{ end }}) {
	var params {{ $request }}

	{{ if $h.Parameters.Query }}
	// Query parameters
	{
		query := r.URL.Query()
		{{- range $_, $q := .Parameters.Query }}
		{
            q, ok := query["{{.ParameterName}}"]
            {{if .Required}}if !ok {
                return zero, fmt.Errorf("query parameter '{{.ParameterName}}': is required")
            }
            {{end -}}
            if ok && len(q) > 0 {
			{{- if .Required }}
                {{ .ParseStrings (print "params.Query." .FieldName) "q" false (returns "zero" (parseError "query" .ParameterName))}}
			{{- else }}
                {{ .ParseStrings "v" "q" true (returns "zero" (parseError "query" .ParameterName))}}
				params.Query.{{ .FieldName }}.Set(v)
			{{- end }}
            }
		}
		{{- end }}
	}
	{{ end }}

	{{ if $h.Parameters.Header }}
	// Headers
	{
		header := r.Header
		{{- range $_, $h := .Parameters.Header }}
		{
            hs := header.Values("{{ .ParameterName }}")
            {{- if .Required }}
            if len(hs) == 0 {
				return zero, fmt.Errorf("header parameter '{{ .ParameterName }}': is required")
			}
            {{- end }}
			if len(hs) > 0 {
			    {{ $h.Parser.ParseString (print "params.Headers." .FieldName) "hs[0]" false (returns "zero" (parseError "header" .ParameterName)) }}
			}
		}
		{{- end}}
	}
	{{ end }}

	{{ if $h.Parameters.Path }}
	// Path parameters
	{
		p := r.URL.Path

		{{- if $h.BasePathPrefix }}
		if !strings.HasPrefix(p, "{{ $h.BasePathPrefix }}") {
			return zero, fmt.Errorf("wrong path: expected '{{ $h.BasePathPrefix }}...'")
		}
		p = p[{{ len $h.BasePathPrefix }}:] // "{{ $h.BasePathPrefix }}"

		if !strings.HasPrefix(p, "/") {
			return zero, fmt.Errorf("wrong path: expected '{{ $h.BasePathPrefix }}/...'")
		}

		{{ end }}

		{{- range $_, $p := $h.PathParsers }}

		{{ $p.ParseString "params.Path." "p" false (returns "zero" nil) }}
		{{- end }}
	}
	{{ end }}

	{{- if $h.Body.TypeName }}

	defer r.Body.Close()
	err := json.NewDecoder(r.Body).Decode(&params.Body)
	if err != nil {
		return zero, fmt.Errorf("decode request body: %w", err)
	}
	{{- end }}

	return params{{ if $h.CanParseError }}, nil{{ end }}
}

func (r {{ $request }}) HTTP() *http.Request { return nil }

func (r {{ $request }}) Parse() {{if $h.CanParseError}}({{end}}{{$request}}{{if $h.CanParseError}}, error){{end}} {	return r{{if $h.CanParseError}}, nil{{end}} }

type {{ $responseWriter }} interface {
	write{{ .Name }}(http.ResponseWriter)
}

{{ range $_, $r := .Responses }}
{{ $r.Render }}
{{ end }}
{{ if .DefaultResponse }}
{{ .DefaultResponse.Render }}
{{ end }}
{{ end }}


{{/* ----------------------------- HandlerParameter ------------------------------------- */}}
{{ define "HandlerParameter" }}
{{- if .FieldComment }}// {{ .FieldName }} - {{ .FieldComment }}
{{end}}
{{- .FieldName }} {{ .FieldType.Render }}
{{- end }}


{{/* ----------------------------- PathParserConstant ------------------------------------- */}}
{{ define "PathParserConstant" }}
if !strings.HasPrefix(p, "{{.Prefix}}") {
	return zero, fmt.Errorf("wrong path: expected '{{.FullPath}}'")
}
p = p[{{len .Prefix}}:] // "{{.Prefix}}"
{{- end }}


{{/* ----------------------------- PathParserVariable ------------------------------------- */}}
{{ define "PathParserVariable" }}
{
	idx := strings.Index({{ .From }}, "/")
	if idx == -1 {
		idx = len({{ .From }})
	}
	vPath := {{ .From }}[:idx]
	{{ .From }} = {{ .From }}[idx:]

	if len(vPath) == 0 {
		return {{.Error.New "required"}}
	}

	{{ .Convert.ParseString .To "vPath" .IsNew .Error }}
}
{{- end }}
