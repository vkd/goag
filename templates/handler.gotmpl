{{/* {{ template "do_not_edit" }} */}}

package {{.PackageName}}

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
)
{{ range $_, $h := .Handlers }}
{{- $name := $h.Name}}
{{- $handlerName := print $name `Handler` }}
{{- $handlerInterface := print $name `Handlerer` }}
{{- $paramsName := print $name `Params` }}
{{- $originIfaceName := print $name `Interface` }}
{{- $responserName := print $name `Responser` }}
{{- $writeResponseFuncName := print `write` $name `Response` }}
{{- $originVariableName := `origin` }}
{{- $needInvalidFn := or .Parameters.Queries .Parameters.Path .RequestBody}}
{{- /* --------------------------------- */}}
// ---------------------------------------------
// {{$name}} - {{$h.Summary}}
// ---------------------------------------------

{{if $h.Description}}// {{$handlerName}} - {{$h.Description}}{{end}}
func {{$handlerName}}(h {{$handlerInterface}}) http.Handler {
	return {{$handlerName}}Func(h.Handler{{if $needInvalidFn}}, h.InvalidResponce{{end}})
}

func {{$handlerName}}Func(fn Func{{$name}}{{if $needInvalidFn}}, invalidFn Func{{$name}}InvalidResponse{{end}}) http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		params{{if $needInvalidFn}}, err{{end}} := new{{$paramsName}}(r)
		{{- if $needInvalidFn}}
		if err != nil {
			invalidFn(err).{{$writeResponseFuncName}}(w)
			return
		}
		{{- end}}

		fn(params).{{$writeResponseFuncName}}(w)
	}
}

type {{$handlerInterface}} interface {
	Handler({{$paramsName}}) {{$responserName}}
	{{if $needInvalidFn}}InvalidResponce(error) {{$responserName}}{{end}}
}

func New{{$handlerInterface}}(fn Func{{$name}}{{if $needInvalidFn}}, invalidFn Func{{$name}}InvalidResponse{{end}}) {{$handlerInterface}} {
	{{- if $needInvalidFn}}
	return private{{$handlerInterface}}{
		Func{{$name}}: fn,
		{{- if $needInvalidFn}}
		Func{{$name}}InvalidResponse: invalidFn,
		{{- end}}
	}
	{{- else}}
	return fn
	{{- end}}
}

{{- if $needInvalidFn}}

type private{{$handlerInterface}} struct {
	Func{{$name}}
	{{- if $needInvalidFn}}
	Func{{$name}}InvalidResponse{{end}}
}
{{- end}}

type Func{{$name}} func({{$paramsName}}) {{$responserName}}

func (f Func{{$name}}) Handler(params {{$paramsName}}) {{$responserName}} { return f(params) }

{{if $needInvalidFn -}}
type Func{{$name}}InvalidResponse func(error) {{$responserName}}

func (f Func{{$name}}InvalidResponse) InvalidResponce(err error) {{$responserName}} { return f(err) }
{{end}}

type {{$paramsName}} struct {
	Request *http.Request
	{{range $_, $q := .Parameters.Queries}}
	{{$q.Field.String}}
	{{- end}}
	{{- range $_, $p := .Parameters.Path}}
	{{$p.FieldName}} {{$p.Type.String}}
	{{- end}}
	{{- if .RequestBody}}

	Body {{.RequestBody.String}}
	{{- end}}
}

func new{{$paramsName}}(r *http.Request) (zero {{$paramsName}}{{if $needInvalidFn}}, _ error{{end}}) {
	var params {{$paramsName}}
	params.Request = r

	{{if .Parameters.Queries}}
	{
		query := r.URL.Query()
		{{- range $_, $q := .Parameters.Queries}}
		{
			{{$q.Parser.String}}
		}
		{{- end}}
	}
	{{end}}

	{{if .Parameters.Path}}
	{
		p := r.URL.Path
		{{- range $_, $p := .Parameters.PathParsers}}

		{{$p.String}}
		{{- end}}
	}
	{{end}}

	{{- if .RequestBody}}

	defer r.Body.Close()
	err := json.NewDecoder(r.Body).Decode(&params.Body)
	if err != nil {
		return zero, fmt.Errorf("decode request body: %w", err)
	}
	{{- end}}

	return params{{if $needInvalidFn}}, nil{{end}}
}

type {{$responserName}} interface {
	{{$writeResponseFuncName}}(w http.ResponseWriter)
}

{{ range $_, $r := .Responses }}
{{$r.String}}
{{ end }}

{{ end -}}

var LogError = func(err error) {
	log.Println(fmt.Sprintf("Error: %v", err))
}

func writeJSON(w io.Writer, v interface{}, name string) {
	err := json.NewEncoder(w).Encode(v)
	if err != nil {
		LogError(fmt.Errorf("write json response %q: %w", name, err))
	}
}

type ErrParseQueryParam struct {
	Name string
	Err  error
}

func (e ErrParseQueryParam) Error() string {
	return fmt.Sprintf("query parameter '%s': %e", e.Name, e.Err)
}

type ErrParsePathParam struct {
	Name string
	Err  error
}

func (e ErrParsePathParam) Error() string {
	return fmt.Sprintf("path parameter '%s': %e", e.Name, e.Err)
}
