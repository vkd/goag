{{/* {{ template "do_not_edit" }} */}}

package {{.PackageName}}

import (
	"net/http"
	"strings"
)

type API struct {
	{{range $_, $h := .Handlers}}
	{{$h.Name}}Handler {{$h.Name}}HandlerFunc
	{{- end}}

	// not found
	NotFoundHandler http.Handler

	Middlewares []func(h http.Handler) http.Handler
}

func (rt *API) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	path := r.URL.Path

	h, path := rt.route(path, r.Method)
	if h == nil {
		h = rt.NotFoundHandler
		if h == nil {
			h = http.NotFoundHandler()
		}
		h.ServeHTTP(rw, r)
		return
	}

	for _, m := range rt.Middlewares {
		h = m(h)
	}
	r = r.WithContext(context.WithValue(r.Context(), pathKey{}, path))
	h.ServeHTTP(rw, r)
}

{{ range $_, $r := .Routes }}
func (rt *API) route{{$r.Name}}(path, method string) (http.Handler, string) {
	{{if or .Handlers .Routes}}prefix, path :{{else}}_, path {{end -}}= splitPath(path)

	{{if or .Handlers .WildcardHandler -}}
	if path == "" {
		{{if .Handlers -}}
		switch prefix {
		{{range $_, $h := .Handlers -}}
		case "{{.Prefix}}":
			switch method {
			{{- range $_, $m := .Methods}}
			case http.Method{{.Method}}:
				return rt.{{.HandlerName}}Handler, "{{.Path}}"
			{{- end}}
			}
		{{end -}}
		}
		{{- end}}
		{{- if .WildcardHandler}}
		switch method {
		{{- range $_, $m := .WildcardHandler.Methods}}
		case http.Method{{.Method}}:
			return rt.{{.HandlerName}}Handler, "{{.Path}}"
		{{- end}}
		}
		{{- end}}
	}
	{{- end}}

	{{if or .Routes .WildcardRouteName -}}
	if path != "" {
		{{if .Routes -}}
		switch prefix {
		{{range $_, $r := .Routes -}}
		case "{{.Prefix}}":
			return rt.route{{.RouteName}}(path, method)
		{{end -}}
		}
		{{- end}}

		{{- if .WildcardRouteName}}

		return rt.route{{.WildcardRouteName}}(path, method)
		{{- end}}
	}
	{{- end}}

	return nil, ""
}
{{ end }}

type pathKey struct{}

func SchemaPath(r *http.Request) string {
	if s, ok := r.Context().Value(pathKey{}).(string); ok {
		return s
	}
	return r.URL.Path
}

func splitPath(s string) (string, string) {
	if !strings.HasPrefix(s, "/") {
		return s, ""
	}
	idx := strings.Index(s[1:], "/")
	if idx == -1 {
		return s, ""
	}
	return s[:idx+1], s[idx+1:]
}
